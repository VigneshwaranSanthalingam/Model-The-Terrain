
AVRGCC1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000022e  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .bss          00000001  00800200  00800200  000002a2  2**0
                  ALLOC
  2 .stab         000006e4  00000000  00000000  000002a4  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000090  00000000  00000000  00000988  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_aranges 00000020  00000000  00000000  00000a18  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_pubnames 000000ab  00000000  00000000  00000a38  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000016f  00000000  00000000  00000ae3  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000000be  00000000  00000000  00000c52  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000002af  00000000  00000000  00000d10  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000a0  00000000  00000000  00000fc0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000103  00000000  00000000  00001060  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000054  00000000  00000000  00001163  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_pubtypes 0000001e  00000000  00000000  000011b7  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 72 00 	jmp	0xe4	; 0xe4 <__ctors_end>
   4:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
   8:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
   c:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  10:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  14:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  18:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  1c:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  20:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  24:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  28:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  2c:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  30:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  34:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  38:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  3c:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  40:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  44:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  48:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  4c:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  50:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  54:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  58:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  5c:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  60:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  64:	0c 94 b9 00 	jmp	0x172	; 0x172 <__vector_25>
  68:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  6c:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  70:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  74:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  78:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  7c:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  80:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  84:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  88:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  8c:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  90:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  94:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  98:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  9c:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  a0:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  a4:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  a8:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  ac:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  b0:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  b4:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  b8:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  bc:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  c0:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  c4:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  c8:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  cc:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  d0:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  d4:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  d8:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  dc:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  e0:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>

000000e4 <__ctors_end>:
  e4:	11 24       	eor	r1, r1
  e6:	1f be       	out	0x3f, r1	; 63
  e8:	cf ef       	ldi	r28, 0xFF	; 255
  ea:	d1 e2       	ldi	r29, 0x21	; 33
  ec:	de bf       	out	0x3e, r29	; 62
  ee:	cd bf       	out	0x3d, r28	; 61
  f0:	00 e0       	ldi	r16, 0x00	; 0
  f2:	0c bf       	out	0x3c, r16	; 60

000000f4 <__do_clear_bss>:
  f4:	12 e0       	ldi	r17, 0x02	; 2
  f6:	a0 e0       	ldi	r26, 0x00	; 0
  f8:	b2 e0       	ldi	r27, 0x02	; 2
  fa:	01 c0       	rjmp	.+2      	; 0xfe <.do_clear_bss_start>

000000fc <.do_clear_bss_loop>:
  fc:	1d 92       	st	X+, r1

000000fe <.do_clear_bss_start>:
  fe:	a1 30       	cpi	r26, 0x01	; 1
 100:	b1 07       	cpc	r27, r17
 102:	e1 f7       	brne	.-8      	; 0xfc <.do_clear_bss_loop>
 104:	0e 94 12 01 	call	0x224	; 0x224 <main>
 108:	0c 94 15 01 	jmp	0x22a	; 0x22a <_exit>

0000010c <__bad_interrupt>:
 10c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000110 <buzzer_pin_config>:

unsigned char data; //to store received data from UDR1

void buzzer_pin_config (void)
{
 DDRC = DDRC | 0x08;		//Setting PORTC 3 as outpt
 110:	3b 9a       	sbi	0x07, 3	; 7
 PORTC = PORTC & 0xF7;		//Setting PORTC 3 logic low to turnoff buzzer
 112:	43 98       	cbi	0x08, 3	; 8
}
 114:	08 95       	ret

00000116 <motion_pin_config>:

void motion_pin_config (void)
{
 DDRA = DDRA | 0x0F;
 116:	81 b1       	in	r24, 0x01	; 1
 118:	8f 60       	ori	r24, 0x0F	; 15
 11a:	81 b9       	out	0x01, r24	; 1
 PORTA = PORTA & 0xF0;
 11c:	82 b1       	in	r24, 0x02	; 2
 11e:	80 7f       	andi	r24, 0xF0	; 240
 120:	82 b9       	out	0x02, r24	; 2
 DDRL = DDRL | 0x18;   //Setting PL3 and PL4 pins as output for PWM generation
 122:	ea e0       	ldi	r30, 0x0A	; 10
 124:	f1 e0       	ldi	r31, 0x01	; 1
 126:	80 81       	ld	r24, Z
 128:	88 61       	ori	r24, 0x18	; 24
 12a:	80 83       	st	Z, r24
 PORTL = PORTL | 0x18; //PL3 and PL4 pins are for velocity control using PWM.
 12c:	eb e0       	ldi	r30, 0x0B	; 11
 12e:	f1 e0       	ldi	r31, 0x01	; 1
 130:	80 81       	ld	r24, Z
 132:	88 61       	ori	r24, 0x18	; 24
 134:	80 83       	st	Z, r24
}
 136:	08 95       	ret

00000138 <port_init>:

//Function to initialize ports
void port_init()
{
	motion_pin_config();
 138:	0e 94 8b 00 	call	0x116	; 0x116 <motion_pin_config>
	buzzer_pin_config();
 13c:	0e 94 88 00 	call	0x110	; 0x110 <buzzer_pin_config>
}
 140:	08 95       	ret

00000142 <buzzer_on>:

void buzzer_on (void)
{
 unsigned char port_restore = 0;
 port_restore = PINC;
 142:	86 b1       	in	r24, 0x06	; 6
 port_restore = port_restore | 0x08;
 144:	88 60       	ori	r24, 0x08	; 8
 PORTC = port_restore;
 146:	88 b9       	out	0x08, r24	; 8
}
 148:	08 95       	ret

0000014a <buzzer_off>:

void buzzer_off (void)
{
 unsigned char port_restore = 0;
 port_restore = PINC;
 14a:	86 b1       	in	r24, 0x06	; 6
 port_restore = port_restore & 0xF7;
 14c:	87 7f       	andi	r24, 0xF7	; 247
 PORTC = port_restore;
 14e:	88 b9       	out	0x08, r24	; 8
}
 150:	08 95       	ret

00000152 <uart0_init>:
// actual baud rate:9600 (error 0.0%)
// char size: 8 bit
// parity: Disabled
void uart0_init(void)
{
 UCSR0B = 0x00; //disable while setting baud rate
 152:	e1 ec       	ldi	r30, 0xC1	; 193
 154:	f0 e0       	ldi	r31, 0x00	; 0
 156:	10 82       	st	Z, r1
 UCSR0A = 0x00;
 158:	10 92 c0 00 	sts	0x00C0, r1
 UCSR0C = 0x06;
 15c:	86 e0       	ldi	r24, 0x06	; 6
 15e:	80 93 c2 00 	sts	0x00C2, r24
// UBRR0L = 0x47; //11059200 Hz
 UBRR0L = 0x5F; // 14745600 Hzset baud rate lo
 162:	8f e5       	ldi	r24, 0x5F	; 95
 164:	80 93 c4 00 	sts	0x00C4, r24
 UBRR0H = 0x00; //set baud rate hi
 168:	10 92 c5 00 	sts	0x00C5, r1
 UCSR0B = 0x98;
 16c:	88 e9       	ldi	r24, 0x98	; 152
 16e:	80 83       	st	Z, r24
}
 170:	08 95       	ret

00000172 <__vector_25>:


SIGNAL(SIG_USART0_RECV) 		// ISR for receive complete interrupt
{
 172:	1f 92       	push	r1
 174:	0f 92       	push	r0
 176:	0f b6       	in	r0, 0x3f	; 63
 178:	0f 92       	push	r0
 17a:	0b b6       	in	r0, 0x3b	; 59
 17c:	0f 92       	push	r0
 17e:	11 24       	eor	r1, r1
 180:	2f 93       	push	r18
 182:	3f 93       	push	r19
 184:	4f 93       	push	r20
 186:	5f 93       	push	r21
 188:	6f 93       	push	r22
 18a:	7f 93       	push	r23
 18c:	8f 93       	push	r24
 18e:	9f 93       	push	r25
 190:	af 93       	push	r26
 192:	bf 93       	push	r27
 194:	ef 93       	push	r30
 196:	ff 93       	push	r31
	 				//making copy of data from UDR0 in 'data' variable 

	UDR0 = 0x55; 				//echo data back to PC
 198:	85 e5       	ldi	r24, 0x55	; 85
 19a:	80 93 c6 00 	sts	0x00C6, r24

		if(data == 0x77) //ASCII value of 8
 19e:	80 91 00 02 	lds	r24, 0x0200
 1a2:	87 37       	cpi	r24, 0x77	; 119
 1a4:	11 f4       	brne	.+4      	; 0x1aa <__vector_25+0x38>
		{
			PORTA=0x06;  //forward
 1a6:	86 e0       	ldi	r24, 0x06	; 6
 1a8:	82 b9       	out	0x02, r24	; 2
		}

		if(data == 0x73) //ASCII value of 2
 1aa:	80 91 00 02 	lds	r24, 0x0200
 1ae:	83 37       	cpi	r24, 0x73	; 115
 1b0:	11 f4       	brne	.+4      	; 0x1b6 <__vector_25+0x44>
		{
			PORTA=0x09; //back
 1b2:	89 e0       	ldi	r24, 0x09	; 9
 1b4:	82 b9       	out	0x02, r24	; 2
		}

		if(data == 0x61) //ASCII value of 4
 1b6:	80 91 00 02 	lds	r24, 0x0200
 1ba:	81 36       	cpi	r24, 0x61	; 97
 1bc:	11 f4       	brne	.+4      	; 0x1c2 <__vector_25+0x50>
		{
			PORTA=0x05;  //left
 1be:	85 e0       	ldi	r24, 0x05	; 5
 1c0:	82 b9       	out	0x02, r24	; 2
		}

		if(data == 0x64) //ASCII value of 6
 1c2:	80 91 00 02 	lds	r24, 0x0200
 1c6:	84 36       	cpi	r24, 0x64	; 100
 1c8:	11 f4       	brne	.+4      	; 0x1ce <__vector_25+0x5c>
		{
			PORTA=0x0A; //right
 1ca:	8a e0       	ldi	r24, 0x0A	; 10
 1cc:	82 b9       	out	0x02, r24	; 2
		}

		if(data == 0x78) //ASCII value of 5
 1ce:	80 91 00 02 	lds	r24, 0x0200
 1d2:	88 37       	cpi	r24, 0x78	; 120
 1d4:	09 f4       	brne	.+2      	; 0x1d8 <__vector_25+0x66>
		{
			PORTA=0x00; //stop
 1d6:	12 b8       	out	0x02, r1	; 2
		}

		if(data == 0x68) //ASCII value of 7
 1d8:	80 91 00 02 	lds	r24, 0x0200
 1dc:	88 36       	cpi	r24, 0x68	; 104
 1de:	11 f4       	brne	.+4      	; 0x1e4 <__vector_25+0x72>
		{
			buzzer_on();
 1e0:	0e 94 a1 00 	call	0x142	; 0x142 <buzzer_on>
		}

		if(data == 0x69) //ASCII value of 9
 1e4:	80 91 00 02 	lds	r24, 0x0200
 1e8:	89 36       	cpi	r24, 0x69	; 105
 1ea:	11 f4       	brne	.+4      	; 0x1f0 <__vector_25+0x7e>
		{
			buzzer_off();
 1ec:	0e 94 a5 00 	call	0x14a	; 0x14a <buzzer_off>
		}

}
 1f0:	ff 91       	pop	r31
 1f2:	ef 91       	pop	r30
 1f4:	bf 91       	pop	r27
 1f6:	af 91       	pop	r26
 1f8:	9f 91       	pop	r25
 1fa:	8f 91       	pop	r24
 1fc:	7f 91       	pop	r23
 1fe:	6f 91       	pop	r22
 200:	5f 91       	pop	r21
 202:	4f 91       	pop	r20
 204:	3f 91       	pop	r19
 206:	2f 91       	pop	r18
 208:	0f 90       	pop	r0
 20a:	0b be       	out	0x3b, r0	; 59
 20c:	0f 90       	pop	r0
 20e:	0f be       	out	0x3f, r0	; 63
 210:	0f 90       	pop	r0
 212:	1f 90       	pop	r1
 214:	18 95       	reti

00000216 <init_devices>:


//Function To Initialize all The Devices
void init_devices()
{
 cli(); //Clears the global interrupts
 216:	f8 94       	cli
 port_init();  //Initializes all the ports
 218:	0e 94 9c 00 	call	0x138	; 0x138 <port_init>
 uart0_init(); //Initailize UART1 for serial communiaction
 21c:	0e 94 a9 00 	call	0x152	; 0x152 <uart0_init>
 sei();   //Enables the global interrupts
 220:	78 94       	sei
}
 222:	08 95       	ret

00000224 <main>:

//Main Function
int main(void)
{
	init_devices();
 224:	0e 94 0b 01 	call	0x216	; 0x216 <init_devices>
 228:	ff cf       	rjmp	.-2      	; 0x228 <main+0x4>

0000022a <_exit>:
 22a:	f8 94       	cli

0000022c <__stop_program>:
 22c:	ff cf       	rjmp	.-2      	; 0x22c <__stop_program>
